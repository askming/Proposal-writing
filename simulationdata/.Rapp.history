ls()
setwd("/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0524_DP_prior")
load(data[3])
ls()
rm(list=ls())
setwd("/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0524_DP_prior")
data = dir()
ls()
load(data[3])
ls()
data
load(data[2])
ls()
get_re = function(post_data){#
	temp = vector(length(post_data), mode="list")#
	for (i in 1: length(post_data)) temp[[i]] = unlist(lapply(post_data[[i]], `[`, 4:100, 1 ))#
	temp#
}
test = get_re(QRDP_beta)
lines(density(test[[2]]), ylab='density', main='', col="red", lty=2)
plot(density(test[[2]]), ylab='density', main='', col="red", lty=2)
data
plot(density(test[[1]]), ylab='density', main='', col="red", lty=2)
setwd('/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/data')#
load(dir()[6])
test2 = get_ui(QRDP_mn_t3_500)
get_ui = function(simulated_data){#
	re = unlist(lapply(simulated_data, `[[`, 'ui'))#
}
test2 = get_ui(QRDP_mn_t3_500)
plot(density(test2))
rm(list=ls())#
setwd("/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0524_DP_prior")#
data = dir()
data
load(data[2])
ls()
get_re = function(post_data){#
	temp = vector(length(post_data), mode="list")#
	for (i in 1: length(post_data)) temp[[i]] = unlist(lapply(post_data[[i]], `[`, 4:100, 1 ))#
	temp#
}
QRDP_beta[[1]]
get_re = function(post_data){#
	temp = vector(length(post_data), mode="list")#
	for (i in 1: length(post_data)) temp[[i]] = unlist(lapply(post_data[[i]], `[`, 4:103, 1 ))#
	temp#
}
test = get_re(QRDP_beta)
length(test)
plot(test[[2]])
plot(density(test[[2]]))
plot(density(test[[3]]))
rm(list=ls())#
setwd("/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0524_DP_prior")#
data = dir()#
# load(data[1])#
load(data[3])
get_re = function(post_data){#
	temp = vector(length(post_data), mode="list")#
	for (i in 1: length(post_data)) temp[[i]] = unlist(lapply(post_data[[i]], `[`, 4:103, 1 ))#
	temp#
}#
#
test = get_re(QRDP_beta)#
plot(density(test[[3]]))
plot(density(test[[2]]))
plot(density(test[[1]]))
setwd('/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/data')
dir()
load('QRDP_mn_normal_500.Rdata')
ls()
load('QRDP_mn_t3_500.Rdata')
ls()
truth = get_ui(QRDP_mn_normal_500)
get_ui = function(simulated_data){#
	re = unlist(lapply(simulated_data, `[[`, 'ui'))#
}
truth = get_ui(QRDP_mn_normal_500)
plot(density(truth))
plot_truth(QRDP_mn_normal_500)
plot_truth = plot(simulated_data){#
	truth = get_ui(simulated_data)#
	plot(density(truth))#
}
plot_truth(QRDP_mn_normal_500)
plot_truth = function(simulated_data){#
	truth = get_ui(simulated_data)#
	plot(density(truth))#
}
plot_truth(QRDP_mn_normal_500)
plot_truth = function(simulated_data,...){#
	truth = get_ui(simulated_data)#
	plot(density(truth),...)#
}
plot_truth(QRDP_mn_normal_500, main='')
plot_sample = function(post_data,...){#
	truth = get_re(post_data_data)#
	plot(density(truth),...)#
}
ls()
plot_sample(QRDP_beta, main='')
plot_sample = function(post_data,...){#
	truth = get_re(post_data)#
	plot(density(truth),...)#
}
plot_sample(QRDP_beta, main='')
plot_sample = function(post_data,...){#
	sample = get_re(post_data)#
	plot(density(sample),...)#
}
get_re = function(post_data){#
	temp = vector(length(post_data), mode="list")#
	for (i in 1: length(post_data)) temp[[i]] = unlist(lapply(post_data[[i]], `[`, 4:103, 1 ))#
	temp#
}
plot_sample(QRDP_beta, main='')
plot_sample(QRDP_beta[[1]], main='')
plot_sample = function(post_data, qt, ...){#
	sample = get_re(post_data)[[qt]]#
	plot(density(sample),...)#
}
plot_sample(QRDP_beta, qt=1, main='')
setwd("/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0524_DP_prior")
data = dir()
data
load('QRDP_beta_normal_100_0524.Rdata')
ls()
plot_sample(QRDP_beta, qt=1, main='')
plot_sample(QRDP_beta, qt=2, main='')
plot_sample(QRDP_beta, qt=3, main='')
setwd("/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0524_DP_prior")
dir()
load(dir()[3])
plot_sample(QRDP_beta, qt=3, main='')
plot_sample(QRDP_beta, qt=2, main='')
setwd('/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0523_normal_prior')
dir()
rm(list=ls())#
# load MCMC object#
# setwd("/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0524_DP_prior")#
setwd('/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0523_normal_prior')
ls()
load(dir()[3])
ls()
setwd('/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/data')
dir()
load(dir()[4])
#####################################################################
# create function to get posterior prediction of r.e., gamma here and plot the denstiy of RE  #
#####################################################################
get_re = function(post_data){#
	temp = vector(length(post_data), mode="list")#
	for (i in 1: length(post_data)) temp[[i]] = unlist(lapply(post_data[[i]], `[`, 4:103, 1 ))#
	temp#
}#
#
plot_sample = function(post_data, qt, ...){#
	sample = get_re(post_data)[[qt]]#
	plot(density(sample),...)#
}#
#
############################################################################################
# create function to get the random effects from simulated data and plot the density of RE#
############################################################################################
get_ui = function(simulated_data){#
	re = unlist(lapply(simulated_data, `[[`, 'ui'))#
} #
#
plot_truth = function(simulated_data,...){#
	truth = get_ui(simulated_data)#
	plot(density(truth),...)#
}
ls()
plot_truth(QRDP_mn_normal_500, main='')
par(new=T)
plot_sample(normal_beta, qt=2, main='', col="red")
plot_truth(QRDP_mn_normal_500, main='')
par(new=T)
plot_sample(normal_beta, qt=2, main='', col="red", xlab='', ylab='')
setwd("/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0524_DP_prior")
dir()
setwd('/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0520')
dir()
load(dir()[1])
ls()
length(QRDP_beta)
load('"QRDP_mn_normal1q_100.Rdata')
load('QRDP_mn_normal1q_100.Rdata')
ls()
length(QRDP_beta)
plot_truth(QRDP_mn_normal_500, main='')
par(new=T)
plot_sample(QRDP_beta, qt=1, main='', col='blue')
par(new=T)
plot_sample(normal_beta, qt=1, main='', col="red", xlab='', ylab='')
plot_sample(QRDP_beta, qt=2, main='', col='blue')
dir()
load('QRDP_mn_normal2q_100.Rdata')
plot_truth(QRDP_mn_normal_500, main='')
par(new=T)
plot_sample(QRDP_beta, qt=2, main='', col='blue')
par(new=T)
plot_sample(normal_beta, qt=2, main='', col="red", xlab='', ylab='')
plot_sample = function(post_data, qt, ...){#
	sample = get_re(post_data)[[qt]]#
	lines(density(sample),...)#
}
plot_truth(QRDP_mn_normal_500, main='')
par(new=T)
plot_sample(QRDP_beta, qt=2, main='', col='blue')
par(new=T)
plot_sample(normal_beta, qt=2, main='', col="red", xlab='', ylab='')
plot_truth(QRDP_mn_normal_500, main='')#
plot_sample(QRDP_beta, qt=2, main='', col='blue', ltyp=2)#
plot_sample(normal_beta, qt=2, main='', col="red", xlab='', ylab='', lty=3)
plot_truth(QRDP_mn_normal_500, main='')#
plot_sample(QRDP_beta, qt=2, main='', col='blue', lty=2)#
plot_sample(normal_beta, qt=2, main='', col="red", xlab='', ylab='', lty=3)
plot_sample = function(post_data, qt, ...){#
	sample = get_re(post_data)[[qt]]#
	plot(density(sample),...)#
}
plot_truth(QRDP_mn_normal_500, main='')#
plot_sample(QRDP_beta, qt=2, main='', col='blue', lty=2)#
plot_sample(normal_beta, qt=2, main='', col="red", xlab='', ylab='', lty=3)
plot_sample(QRDP_beta, qt=2, main='', col='blue', lty=2)
plot_sample(QRDP_beta, qt=2, main='', col='blue', lty=2)
plot(density(QRDP_beta[[1]][4:103,1]))
QRDP_beta[[1]]
plot(density(QRDP_beta[[1]][[1]][4:103,1]))
plot(density(QRDP_beta[[1]][[100]][4:103,1]))
plot(density(QRDP_beta[[1]][[99]][4:103,1]))
plot(density(QRDP_beta[[1]][[98]][4:103,1]))
ls()
get_re = function(post_data, qt){#
	# qt is the specification of which quantile, the index not the actual quantile value#
	temp = unlist(lapply(post_data[[qt]], `[`, 4:103, 1 ))#
	temp#
}
sample_re = get_re(QRDP_beta, 1)
test = vector(3, mode="list")
test
test[1:3]
test[[1:3]]
test[1]
get_re = function(post_data, qt){#
	# qt is the specification of which quantile, the index not the actual quantile value#
	temp = unlist(lapply(post_data[qt], `[`, 4:103, 1 ))#
	temp#
}
sample_re = get_re(QRDP_beta, 1)
test
test[1]
test[2]
test[3]
test[1:3]
class(test[1:3])
class(test[1])
get_re = function(post_data, qt){#
	# qt is the specification of which quantile, the index not the actual quantile value#
	temp = unlist(lapply(post_data[[qt]], `[`, 4:103, 1 ))#
	temp#
}
sample_re = get_re(QRDP_beta, 1)
length(sample_re)
mean(sample_re)
rm(list=ls())
setwd("/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0524_DP_prior")
dir()
load(dir()[1])
ls()
setwd('/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/data')
dir()
load(dir()[1])
get_re = function(post_data, qt){#
	# qt is the specification of which quantile, the index not the actual quantile value#
	temp = unlist(lapply(post_data[[qt]], `[`, 4:103, 1 ))#
	temp#
}
sample_re = get_re(QRDP_beta, 1)
mean(sample_Re)
mean(sample_re)
var(sample_re)
3*8/(121*12)
sample_re = get_re(QRDP_beta, 2)
mean(sample_re)
var(sample_re)
sample_re = get_re(QRDP_beta, 3)
var(sample_re)
mean(sample_re)
sample_re1 = get_re(QRDP_beta, 1)#
sample_re2 = get_re(QRDP_beta, 2)#
sample_re3 = get_re(QRDP_beta, 3)
re= c(sample_re1, sample_re2, sample_re3)
length(re)
plot(density(re))
ls()
setwd("/Users/askming/Dropbox/RA works/Self/7. BQLMM_DP/output/0524_DP_prior")
dir()
load(dir()[2])
sample_re1 = get_re(QRDP_beta, 1)#
sample_re2 = get_re(QRDP_beta, 2)#
sample_re3 = get_re(QRDP_beta, 3)
re= c(sample_re1, sample_re2, sample_re3)
plot(density(re))
plot(density(re1))
plot(density(sample_re1))
lines(density(sample_re2),lty=2)
lines(density(sample_re3),lty=3)
lines(density(re),col='red',lty=4)
plot(density(sample_re1), ylim=c(0,2))
lines(density(sample_re2),lty=2)
lines(density(sample_re3),lty=3)
lines(density(re),col='red',lty=4)
plot(density(sample_re1), ylim=c(0,3))
lines(density(sample_re2),lty=2)
lines(density(sample_re3),lty=3)
lines(density(re),col='red',lty=4)
e1 = rnorm(1000, 0, 1)#
e2= rnorm(1000, 0, 3)
e = c(e1, e2)#
plot(density(e))
e1 = rnorm(1000, 0, 1)#
e2= rnorm(1000, -1, 3)#
e = c(e1, e2)#
plot(density(e))
e1 = rnorm(1000, 1, 2)#
e2= rnorm(1000, -1, 3)#
e = c(e1, e2)#
plot(density(e))
e = 0.2*e1 + 0.8*e2
plot(density(e))
get_ui = function(simulated_data, id){#
	re = unlist(lapply(simulated_data[[id]], `[[`, 'ui'))#
}
ls()
ui = get_ui(QRDP_beta_normal_500, 1)
str(QRDP_beta_normal_500[[1]])
gen_data = function(beta, I, t, re, error...){#
	# I is the number of subjects#
	# t is the number of repeated measures#
	# re is the random effects#
	# beta si the vector of regression coefficients#
	# ui1 is the random intercep#
	# ui2 is the random slope#
	col = length(beta)#
	x = matrix(rep(1, I*t*ncol), ncol=ncol)#
	x[,2] = runif(I*t,0,10)#
	re1 = rnorm(I, 0, 9)#
	y = numeric(I*t)#
	ind <- seq(1,(I+1)*t, by=t) # indicatior of observation#
	for (i in 1:I){ #
		for (j in ind[i]:ind[i+1]-1){#
    		y[j] <- beta[1] + beta[2]*x[j,2] + re1[i] + re[i]*x[j,2] + (1+x[j,2]/11)*error[j]#
    	}#
 	}#
	outdata = list(y=y, x=x, e=error, t=ind, ui1=re, ui2=re1)	#
}
gen_mn = function(I, p, m1, m2, s1, s2){#
	# n is the sample size#
	# p is the proportion of two mixture#
	# m and s are the mean and std of normal distributions#
		i = runif(n) < p#
		rnorm(n,mean = ifelse(i,m1,m2), sd=ifelse(i,s1,s2))	#
}
gen_mn = function(I, p, m, s){#
	# n is the sample size#
	# p is the proportion of two mixture#
	# m and s are the mean and std of normal distributions#
		i = runif(I) < p#
		rnorm(I, mean = ifelse(i,m[1],m[2]), sd=ifelse(i,s[1],s[2]))	#
}
re = gen_mn(100, 0.3, c(-0.7,0.3), c(0.3,0.3))
plot(density(re))
length(seq(1,(20+1)*5, by=5))
seq(1,(20+1)*5, by=5)
?stop
test = gen_data(c(1, -1), 100, 5, re=re, error=rt(500, 3))
gen_data = function(beta, I, t, re, error){#
	# I is the number of subjects#
	# t is the number of repeated measures#
	# re is the random effects#
	# beta si the vector of regression coefficients#
	# ui1 is the random intercep#
	# ui2 is the random slope#
	if (length(error)!=I*t) stop("check the length of error term!")#
	ncol = length(beta)#
	x = matrix(rep(1, I*t*ncol), ncol=ncol)#
	x[,2] = runif(I*t,0,10)#
	re1 = rnorm(I, 0, 9)#
	y = numeric(I*t)#
	ind <- seq(1,(I+1)*t, by=t) # indicatior of observation#
	for (i in 1:I){ #
		for (j in ind[i]:ind[i+1]-1){#
    		y[j] <- beta[1] + beta[2]*x[j,2] + re1[i] + re[i]*x[j,2] + (1+x[j,2]/11)*error[j]#
    	}#
 	}#
	outdata = list(y=y, x=x, e=error, t=ind, ui1=re, ui2=re1)	#
}
test = gen_data(c(1, -1), 100, 5, re=re, error=rt(500, 3))
str(test)
plot(density(test$ui2))
plot(density(test$ui1))
plot(density(test$e))
mn_t3_300 = lapply(rep(100,500), gen_data, beta=c(1,-1), t = 5, re=re, error=rt(500, 3))
length(mn_t3_300)
str(mn_t3_300[[1]])
setwd("/Users/askming/Dropbox/RA works/Self/Proposal writing/simulationdata")
save(mn_t3_300 ,file="mn_t3_300.Rdata")
plot(mn_t3_300[[1]]$ui1)
plot(density(mn_t3_300[[1]]$ui1))
plot(density(mn_t3_300[[150]]$ui1))
plot(density(mn_t3_300[[300]]$ui1))
gen_data = function(beta, I, t, re, error){#
	# I is the number of subjects#
	# t is the number of repeated measures#
	# re is the random effects#
	# beta si the vector of regression coefficients#
	# ui1 is the random intercep#
	# ui2 is the random slope#
	if (length(error)!=I*t) stop("check the length of error term!")#
	ncol = length(beta)#
	x = matrix(rep(1, I*t*ncol), ncol=ncol)#
	x[,2] = runif(I*t,0,10)#
	# re1 = rnorm(I, 0, 9) # random intercept#
	y = numeric(I*t)#
	ind <- seq(1,(I+1)*t, by=t) # indicatior of observation#
	for (i in 1:I){ #
		for (j in ind[i]:ind[i+1]-1){#
    		y[j] <- beta[1] + beta[2]*x[j,2] + re[i] + (1+x[j,2]/11)*error[j]#
    	}#
 	}#
	outdata = list(y=y, x=x, t=ind, ui=re, e=error)	#
}
mn_t3_300 = lapply(rep(100,500), gen_data, beta=c(1,-1), t = 5, re=mn, error=rt(500, 3))
mn = gen_mn(100, 0.3, c(-0.7,0.3), c(0.3,0.3))
mn_t3_300 = lapply(rep(100,500), gen_data, beta=c(1,-1), t = 5, re=mn, error=rt(500, 3))
setwd("/Users/askming/Dropbox/RA works/Self/Proposal writing/simulationdata")
save(mn_t3_300 ,file="mn_t3_300.Rdata")
plot(mn_t2_300[[1]]$ui)
plot(mn_t3_300[[1]]$ui)
plot(density(mn_t3_300[[1]]$ui))
plot(density(mn_t3_300[[149]]$ui))
run_jags<-function(data,tau,I,K){#
	# K is number of truncation#
	setwd("/work/02784/myang3/blqmm_pd/model")#
	model.file<-"/work/02784/myang3/blqmm_pd/model/BQLMM_DP.txt"#
	N <- length(data$y)#
	jags.data <- list(y=data$y, x=data$x, qt=tau, t=data$t, I=I, K=K)#
 	jags.params<-c("beta","gamma","sigma")#
 	jags.inits<-function(){	list(beta=c(0.1,0.1), gamma=rep(0.1,I), sigma=0.1, alpha=0.1, er=rep(0.1,N))	#
  }	#
  jags(data=jags.data, inits=jags.inits, jags.params, n.iter=2000, n.burnin=1000,model.file=model.file)	#
}
